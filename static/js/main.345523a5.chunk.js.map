{"version":3,"sources":["Aviasales.jsx","App.jsx","serviceWorker.js","index.jsx","App.module.css"],"names":["AviaSales","props","useState","step","setStep","ticketsList","number","arr","i","length","obj","id","price","company","carrier","forward","segments","origin","destination","toward","timeForward","duration","timeToward","stepsForward","stops","stepsToward","stepsForwardCities","join","stepsTowardCities","push","filter","e","renderingData","className","classes","body","ul","onChange","mainTickets","wrapper","map","el","key","ticketsArea","src","alt","App","searchId","setSearchId","setTicketsList","stop","setStop","list","setList","setMainTickets","first","useEffect","a","axios","result","data","fetchData","tickets","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.345523a5.chunk.js","sourcesContent":["/* eslint-disable arrow-parens */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable no-unused-expressions */\n\nimport React, { useState } from 'react';\nimport { Checkbox } from 'antd';\nimport classes from './App.module.css';\n\nconst AviaSales = props => {\n  const [step, setStep] = useState({\n    step: 2,\n  });\n\n  let ticketsList = props.ticketsList;\n\n  const number = step.step;\n\n  const arr = [];\n  for (let i = 0; i < ticketsList.length; i++) {\n    const obj = {\n      id: i,\n      price: ticketsList[i].price,\n      company: `//pics.avs.io/99/36/{${ticketsList[i].carrier}}.png`,\n      forward: `${ticketsList[i].segments[0].origin}-${ticketsList[i].segments[0].destination}`,\n      toward: `${ticketsList[i].segments[1].origin}-${ticketsList[i].segments[0].destination}`,\n      timeForward: ticketsList[i].segments[0].duration,\n      timeToward: ticketsList[i].segments[1].duration,\n      stepsForward: ticketsList[i].segments[0].stops.length,\n      stepsToward: ticketsList[i].segments[1].stops.length,\n      stepsForwardCities: ticketsList[i].segments[0].stops.join('-'),\n      stepsTowardCities: ticketsList[i].segments[1].stops.join('-'),\n    };\n    arr.push(obj);\n  }\n\n  const changing = () => {\n    ticketsList = props.mainTickets;\n    setStep({\n      ...step,\n      step: 1,\n    });\n  };\n  const filter = arr.filter(e => e.stepsForward + e.stepsToward === number);\n  const renderingData = [];\n  for (let i = 0; i < 5; i++) {\n    renderingData.push(filter[i]);\n  }\n  if (arr.length !== 0) {\n    return (\n      <div className={classes.body}>\n        <ul className={classes.ul}>\n          <li>\n            <Checkbox onChange={changing}> Все</Checkbox>\n          </li>\n          <li>\n            <Checkbox>1 Пересадка</Checkbox>\n          </li>\n          <li>\n            <Checkbox>2 Пересадки</Checkbox>\n          </li>\n          <li>\n            <Checkbox>3 Пересадки</Checkbox>\n          </li>\n          <li>\n            <Checkbox>Без пересадок</Checkbox>\n          </li>\n        </ul>\n        <div className={classes.wrapper}>\n          {renderingData.map(el => (\n            <div key={el.id} className={classes.ticketsArea}>\n              <ul>\n                <li>{el.price}</li>\n                <li>{el.toward}</li>\n              </ul>\n              <ul>\n                <li>{el.timeForward}</li>\n                <li>{el.timeToward}</li>\n              </ul>\n              <ul>\n                <li>{el.stepsForward}</li>\n                <li>{el.stepsToward}</li>\n              </ul>\n              <ul>\n                <li>{el.stepsForwardCities}</li>\n                <li>{el.stepsTowardCities}</li>\n                <li>\n                  <img src={el.company} alt=\"\" />\n                </li>\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  return 'please wait';\n};\nexport default AviaSales;\n","/* eslint-disable arrow-body-style */\n/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport './App.module.css';\nimport axios from 'axios';\nimport AviaSales from './Aviasales';\n\nconst App = () => {\n  const [searchId, setSearchId] = useState('');\n  const [ticketsList, setTicketsList] = useState([]);\n  const [stop, setStop] = useState(false);\n  const [list, setList] = useState([]);\n  const [mainTickets, setMainTickets] = useState([]);\n\n  const first = [];\n  if (mainTickets.length !== 0) {\n    for (let i = 0; i < 50; i++) {\n      first.push(mainTickets[i]);\n    }\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://front-test.beta.aviasales.ru/search');\n      setSearchId(result.data.searchId);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (searchId !== '') {\n        const result = await axios(\n          `https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`\n        );\n        setTicketsList(result.data.tickets);\n        setStop(result.data.stop);\n        setMainTickets(mainTickets.concat(result.data.tickets));\n      }\n    };\n    if (stop !== true) {\n      fetchData();\n    }\n    if (stop === true) {\n      setList(list.concat(mainTickets));\n    }\n  }, [searchId, stop, mainTickets, list]);\n\n  return <AviaSales ticketsList={first} mainTickets={mainTickets} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__ZTvxg\",\"ul\":\"App_ul__241OB\",\"ticketsArea\":\"App_ticketsArea__2vWHl\",\"wrapper\":\"App_wrapper__2Rh_f\"};"],"sourceRoot":""}