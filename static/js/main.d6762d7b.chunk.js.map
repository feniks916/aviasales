{"version":3,"sources":["App.module.css","Aviasales.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","AviaSales","props","useState","step","setStep","number","arr","i","ticketsList","length","obj","id","price","company","carrier","forward","segments","origin","destination","toward","timeForward","duration","timeToward","stepsForward","stops","stepsToward","stepsForwardCities","join","stepsTowardCities","push","filter","e","renderingData","className","classes","body","ul","onChange","wrapper","map","el","key","ticketsArea","src","alt","App","searchId","setSearchId","setTicketsList","useEffect","a","axios","result","data","fetchData","tickets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6762d7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__ZTvxg\",\"ul\":\"App_ul__241OB\",\"ticketsArea\":\"App_ticketsArea__2vWHl\",\"wrapper\":\"App_wrapper__2Rh_f\"};","/* eslint-disable arrow-parens */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable no-unused-expressions */\n\nimport React, { useState } from 'react';\nimport { Checkbox } from 'antd';\nimport classes from './App.module.css';\n\nconst AviaSales = props => {\n  const [step, setStep] = useState(2);\n\n  const changing = () => {\n    debugger;\n    setStep({\n      ...step,\n      step: 1,\n    });\n  };\n  const number = step;\n\n  const arr = [];\n  for (let i = 0; i < props.ticketsList.length; i++) {\n    const obj = {\n      id: i,\n      price: props.ticketsList[i].price,\n      company: `//pics.avs.io/99/36/{${props.ticketsList[i].carrier}}.png`,\n      forward: `${props.ticketsList[i].segments[0].origin}-${props.ticketsList[i].segments[0].destination}`,\n      toward: `${props.ticketsList[i].segments[1].origin}-${props.ticketsList[i].segments[0].destination}`,\n      timeForward: props.ticketsList[i].segments[0].duration,\n      timeToward: props.ticketsList[i].segments[1].duration,\n      stepsForward: props.ticketsList[i].segments[0].stops.length,\n      stepsToward: props.ticketsList[i].segments[1].stops.length,\n      stepsForwardCities: props.ticketsList[i].segments[0].stops.join('-'),\n      stepsTowardCities: props.ticketsList[i].segments[1].stops.join('-'),\n    };\n    arr.push(obj);\n  }\n\n  const filter = arr.filter(e => e.stepsForward + e.stepsToward === number);\n\n  const renderingData = [];\n  for (let i = 0; i < 5; i++) {\n    renderingData.push(filter[i]);\n  }\n  if (arr.length !== 0) {\n    return (\n      <div className={classes.body}>\n        <ul className={classes.ul}>\n          <li>\n            <Checkbox onChange={changing}> Все</Checkbox>\n          </li>\n          <li>\n            <Checkbox>1 Пересадка</Checkbox>\n          </li>\n          <li>\n            <Checkbox>2 Пересадки</Checkbox>\n          </li>\n          <li>\n            <Checkbox>3 Пересадки</Checkbox>\n          </li>\n          <li>\n            <Checkbox>Без пересадок</Checkbox>\n          </li>\n        </ul>\n        <div className={classes.wrapper}>\n          {renderingData.map(el => (\n            <div key={el.id} className={classes.ticketsArea}>\n              <ul>\n                <li>{el.price}</li>\n                <li>{el.toward}</li>\n              </ul>\n              <ul>\n                <li>{el.timeForward}</li>\n                <li>{el.timeToward}</li>\n              </ul>\n              <ul>\n                <li>{el.stepsForward}</li>\n                <li>{el.stepsToward}</li>\n              </ul>\n              <ul>\n                <li>{el.stepsForwardCities}</li>\n                <li>{el.stepsTowardCities}</li>\n                <li>\n                  <img src={el.company} alt=\"\" />\n                </li>\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  return 'please wait';\n};\n\nexport default AviaSales;\n","/* eslint-disable arrow-body-style */\n/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport './App.module.css';\nimport axios from 'axios';\nimport AviaSales from './Aviasales';\n\nconst App = () => {\n  const [searchId, setSearchId] = useState('');\n  const [ticketsList, setTicketsList] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://front-test.beta.aviasales.ru/search');\n      setSearchId(result.data.searchId);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`,\n      );\n      setTicketsList(result.data.tickets);\n    };\n    fetchData();\n  }, [searchId]);\n\n\n  return <AviaSales ticketsList={ticketsList} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}